name: Terraform auto-merge
description: 'Auto-approve or Auto-merge terrafrom changes that do not have state changes'
inputs:
  github-token:
    description: 'Github token of the bot used for the auto-approving'
    required: true
  terraform-directory:
    description: 'Root directory for the terraform files e.g. terraform/'
    required: true
  merge:
    description: 'Enable auto-merging'
    required: false
    default: false
  force-merge:
    description: 'Enable auto-merging using admin access'
    required: false
    default: false
runs:
  using: 'composite'
  steps:
  - if: github.event_name != 'pull_request'
    run: exit 1
    shell: bash
  # get changed files inside pr (limited to 100 per request, but dependabot PRs are small so who cares)
  - run: |
      PR_NUMBER=$(echo "$GITHUB_REF" | cut -d '/' -f3)
      gh pr -R "${GITHUB_REPOSITORY}" view "${PR_NUMBER}" --json files --jq '.files.[].path' \
        | grep -qv "^${${TERRAFORM_DIR%/}##./}/" || echo "skip=false" >> $GITHUB_OUTPUT
    shell: bash
    id: check
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      TERRAFORM_DIR: ${{ inputs.terraform-directory }}
  # download artifact created by pararius/action-terraform
  - uses: actions/download-artifact@v3
    if: steps.check.outputs.skip == 'false'
    with:
      name: terraform
      path: summary
  # output true if any state in inputs.terraform-directory changed
  - id: summary
    if: steps.check.outputs.skip == 'false'
    shell: bash
    run: cat summary/terraform/*.summary | grep 'true' || echo "has_changes=false" >> $GITHUB_OUTPUT
  # approve based on summary step ouptput
  - uses: hmarr/auto-approve-action@v3
    if: steps.summary.outputs.has_changes == 'false'
    with:
      github-token: ${{ inputs.github-token }}
  # merge based on summary step output
  - if: (inputs.merge || inputs.force-merge) && steps.summary.outputs.has_changes == 'false'
    run: |
      PR_NUMBER=$(echo "$GITHUB_REF" | cut -d '/' -f3)
      gh pr -R "${GITHUB_REPOSITORY}" merge "${PR_NUMBER}" -s `[[ "$USE_ADMIN" == "true" ]] && echo '--admin'`
    shell: bash
    env:
      USE_ADMIN: ${{ inputs.force-merge }}
      GITHUB_TOKEN: ${{ inputs.github-token }}
